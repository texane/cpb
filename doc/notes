--- directory organization

. sched
.. static
... kaapi_static
.. ws
... kaapi_sched_ws_splitter_t // affinity splltter ...

. data // contains the data structure
.. concurrent_range
.. conccurent_stream -> range + current lower bound, for reduction
.. hlock_t // hierarchical lock
.. lock_t // flat lock

. memory // how to communicate in between as
.. 

. arch
.. common // kaapi_proc abi
.. cuda // initialisation, task execution routine
.. host, generic // default architecture

. system
.. kaapi_sys_get_numa
.. kaapi_sys_get_l1();

. topology // idea is to build the virtual machine topo
.. kaapi_topo_create_flat
.. kaapi_topo_create_tree


-- cuda adaptive processing
. implementation


-- kaapi_workstream_t
. example/stream


-- splitting the work on hierarchical machines

. intro
 . idfreeze topo
  . levels: socket, numa, l3
 . compare xkaapi benchs with pthread on foreach

. problem: in iterative algorithms, the next splitting
iteration of an algorithm should distribute the data on
a level <= the current one.
. solutions
 . one flat group
  . currently implemented, does not work well on a classical
  multicore numa machine
   . workstealing aims at balancing the load, but not relevant
   on those machines since processing units are homogeneous

 . static groups
  . advantages
   . no need to to keep track of the data site
  . drawbacks
   . the initial data distribution needs to be good enough
  . the workers are organized in a group hierarchy
   . a worker can steal any worker that is <= its level
  . needs for an initial data distribution (bootstraping)
   . either classical workstealing
    . until convergence criteria met (ie. similar to kmeans)
   . or rely on a previous allocation scheme
    . either previous tasks owned the data
    . or the user can statically bind data to sites
  . implementation

 . more dynamic groups
  . problem with static group if data are initially not well distributed
   . some groups may have more work than others
   . since no inter group stealing allowed, no load balancing
   . in this case, the idea is to allow a starving group to steal another one
    . workers always steal locally
    . if some threshold (according to some metrics) is reached, steal remotely
   . difficulty
    . find the (metrics, threshold)
    . how much to steal remotely (group size?)

. implementation details
 . it should be possible to switch the policy dynamically to allow hybrid schemes
  . do N iterations static then 1 dynamic
 . provide an initial allocator that distributes equally the data amongst a given
 workstealing tree
  . recursive, stops on the first unallocatable node (ie. l3)
  . assume 

. ideas
 . build the group layers according to the initial data distribution
  . query the system to get data location

 . initial distribution
  . hierarchical: data should not be evicted from the initial level
   -> use work per group
  . keep the grouping impelmentation light
   -> allow to see normal workstealing as the flat, 1 group case

  . create a group accordingly to the data initial distribution
   -> choose the thread repartition to minimize the total distance
   -> kaapi_memtopo_create_group_for_data();

 . C++ interface
  . ka::group simple_group(1, 2, 4);
  . ka::sched::enter_adaptive_section(splitter, args, simple_group);
  . ka::sched::leave_adaptive_section();


 . todo
  . the request must be set by group, not by kproc. todo

  . grouping
   . at initialization, groups are build
    . core (ie. one group per core), l3, socket, machine (ie. flat)
   . the processor block contains at most 4 groups
    . the interpretation is given by specializing the work stealing method

  . hierarchical workstealing
   . starvation
    . metric used: missing steal count
    . one register per proc
    . reset when a steal succeeds
    . consider member starvation when ws_failed_reqs >= group->member_count
    . consider group starvation when every member starving

   . leader selection
    . the one who acquires the lock test for starvation

   . hierarchy implementation
    . groups[4]
    . if (lock_acquire() && starving_group())
       hierarhical_stealing(current_group = ws_groups[i++])


---
. bugs
 . au kaapi_finalize, structures are used concurrently while being freed
  -> 2 time finalize
   . ensure everyone saw the term signal
   . then ask everyone to free
